"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[321],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(t),d=o,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||a;return t?n.createElement(m,i(i({ref:r},p),{},{components:t})):n.createElement(m,i({ref:r},p))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2077:function(e,r,t){t.r(r),t.d(r,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:1},l="Pre-processor",c={unversionedId:"tutorial-basics/pre-processor",id:"tutorial-basics/pre-processor",title:"Pre-processor",description:"The pre-processor is a part of venumlang that allows you to pre-process your code before it is compiled.",source:"@site/docs/tutorial-basics/pre-processor.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/pre-processor",permalink:"/docs/tutorial-basics/pre-processor",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/pre-processor.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/docs/tutorial-basics/variables"},next:{title:"Branching and loops",permalink:"/docs/tutorial-basics/branching-and-loops"}},p={},u=[{value:"Including files",id:"including-files",level:2},{value:"Defining macros",id:"defining-macros",level:2},{value:"Compiler options",id:"compiler-options",level:2}],f={toc:u};function d(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pre-processor"},"Pre-processor"),(0,a.kt)("p",null,"The pre-processor is a part of venumlang that allows you to pre-process your code before it is compiled.\nAs of now, it allows you to make macros that expand to 1 line, and include other files."),(0,a.kt)("h2",{id:"including-files"},"Including files"),(0,a.kt)("p",null,"The pre-processor allows you to include other files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="files.vlang"',title:'"files.vlang"'},"int x = 100;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'@include "file.vlang" // this will paste the contents of file.vlang into the current file\nprint x;\n')),(0,a.kt)("h2",{id:"defining-macros"},"Defining macros"),(0,a.kt)("p",null,"Macros allow you to get rid of some magic numbers, imagine a macro that expands to the number of elements in an array (since you can't use variables etc as array lengths)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"@define ARRAY_LENGTH 10\nint arr[ARRAY_LENGTH];\n")),(0,a.kt)("p",null,"Macros are only allowed be defined on a single line."),(0,a.kt)("h2",{id:"compiler-options"},"Compiler options"),(0,a.kt)("p",null,"To easy the building process, venumlang lets you specify compiler options (such as include paths).\nTo get started, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"config.toml")," file in the root directory of your project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[pre_processor]\ninclude_paths = [\n    ".",\n    "../stdlib"\n]\n\n[compiler]\noutput_path = "./output/"\n')))}d.isMDXComponent=!0}}]);