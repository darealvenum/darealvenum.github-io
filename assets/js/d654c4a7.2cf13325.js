"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[221],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),d=s(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,i(i({ref:e},p),{},{components:t})):r.createElement(m,i({ref:e},p))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2422:function(n,e,t){t.r(e),t.d(e,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={sidebar_position:2},l="Branching and loops",s={unversionedId:"tutorial-basics/branching-and-loops",id:"tutorial-basics/branching-and-loops",title:"Branching and loops",description:"Branching",source:"@site/docs/tutorial-basics/branching-and-loops.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/branching-and-loops",permalink:"/docs/tutorial-basics/branching-and-loops",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/branching-and-loops.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Pre-processor",permalink:"/docs/tutorial-basics/pre-processor"},next:{title:"Functions",permalink:"/docs/tutorial-basics/functions"}},p={},u=[{value:"Branching",id:"branching",level:2},{value:"Loops",id:"loops",level:2}],d={toc:u};function f(n){var e=n.components,t=(0,a.Z)(n,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"branching-and-loops"},"Branching and loops"),(0,o.kt)("h2",{id:"branching"},"Branching"),(0,o.kt)("p",null,"Venumlang has support for branching using ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"elif")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," statements.\nIf statements will evaluate to true if the condition evaluates to 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'@include "stdlib/io.vlang"\nint a = 20;\nif (a == 21) {\n  println("a is 20");\n}\nelif (a == 20) {\n  println("a is 21");\n}\nelse {\n  println("a is not 20 or 21");\n}\n')),(0,o.kt)("h2",{id:"loops"},"Loops"),(0,o.kt)("p",null,"Venumlang has support for loops using ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," statements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'@include "stdlib/io.vlang"\nfor(int j = 0; j < 2; j+=1) {\n  printint(i);\n}\n\n>> 1\n>> 2\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'@include "stdlib/io.vlang"\nint i = 0;\nwhile(i < 2) {\n  printint(i);\n  i+=1;\n}\n>> 1\n>> 2\n')))}f.isMDXComponent=!0}}]);